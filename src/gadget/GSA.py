#!/usr/bin/python3
"""
GadgetSetAnalyzer (GSA)
This static analysis tool compares an original binary with one or more variants derived from it to determine how a
software transformation or difference in binary production (e.g., compiler used, optimizations selected) impacts the
set of code-reuse gadgets available. Several metrics are generated by GSA, and are described in the README.

Dependencies:
GSA uses the common tool <ROPgadget> under the hood to obtain a gadget catalog. Output of sensitive addresses uses the
<angr> library.

"""

# Standard Library Imports
import argparse
import sys

# Third Party Imports


# Local Imports
from utility import *
from static_analyzer.GadgetSet import GadgetSet
from static_analyzer.GadgetStats import GadgetStats

# Parse Arguments
parser = argparse.ArgumentParser()
parser.add_argument("original", help="Original program binary.", type=str)
parser.add_argument("set_file", help="File containing the set of pages being mapped at a given time", type=str)
parser.add_argument("text_begin", help="The offset to the text code within binary", type=lambda x: int(x,16))
parser.add_argument("text_size", help="The size of the text code region within binary", type=lambda x: int(x,16))
parser.add_argument("--text_only", help="Generate the gadgets for only the code section of the application", action='store_true')
parser.add_argument("--binary_version", help="Figure out the binary version that is being utilized", action="store", type=str, default="")
parser.add_argument("--result_folder_name", help="Optionally specifies a specific output file name for the results folder.", action="store", type=str)
parser.add_argument("--original_name", help="Optionally specifies a specific name for the 'original' binary.", action="store", type=str, default="Original")
parser.add_argument("--output_console", help="Output gadget set and comparison data to console.", action="store_true")
parser.add_argument("--output_locality", help="Output gadget locality metric as a CSV file. Ignored if --output_metrics is not specified.", action='store_true')
args = parser.parse_args()

print("Starting Gadget Set Analyzer")
sets = []
with open(args.set_file,"r") as f:
    line = f.readline()
    while(line):
        line_split = line.strip().split()[1:]
        if line_split[0] == "X":
            line = f.readline()
            continue
        line_list = [int(i) for i in line_split]
        if(line_list[0] == -1):
            line_list = line_list[1:]
        if(args.binary_version == "wpd" or args.binary_version == "wpd_bisca" or args.binary_version == "wpd_ics"):
            line_list.append(args.text_size // 4096)
        sets.append(line_list)
        line = f.readline()

# Variant map
file1 = {}
file2 = {}
file3 = {}
file4 = {}
file5 = {}
file6 = {}
file7 = {}
file8 = {}

# Create Gadget sets for original
print("Analyzing original package [" + args.original_name + "] located at: " + args.original)
original = GadgetSet(args.original_name, args.original, False, args.output_console, args.text_begin, args.text_size, args.text_only)

directory = "results"+args.binary_version+"/"

# Create a timestamped results folder
try:
    if args.result_folder_name is None:
        directory_name = create_output_directory(directory+"analyzer_results")
    else:
        directory_name = create_output_directory(directory + args.result_folder_name, False)
except OSError as osErr:
    print("An OS Error occurred during creation of results directory: " + osErr.strerror)
    sys.exit("Results cannot be logged, aborting operation...")
print("Writing metrics files to " + directory_name)

rate_format = "{:.1%}"
float_format = "{:.2f}"

# Prepare file line arrays
# Output file 1: Gadget Counts/Reduction, Total and by Category
file_1_lines = ["Package Variant,ROP Gadgets,JOP Gadgets,COP Gadgets,Special Purpose Gadgets,Total Gadgets\r"]
orig_counts = original.name + "," + str(len(original.ROPGadgets))
orig_counts = orig_counts + "," + str(len(original.JOPGadgets))
orig_counts = orig_counts + "," + str(len(original.COPGadgets))
orig_counts = orig_counts + "," + str(original.total_sp_gadgets)
orig_counts = orig_counts + "," + str(original.total_unique_gadgets) + "\r"
file_1_lines.append(orig_counts)

# Output file 2: Gadget Introduction Rates
file_2_lines = ["Package Variant,Total Gadgets,Total Introduction Rate,ROP Gadgets,ROP Introduction Rate,JOP Gadgets,JOP Introduction Rate,COP Gadgets,COP Introduction Rate\r"]
orig_counts = original.name + "," + str(original.total_unique_gadgets) + ", ,"
orig_counts = orig_counts + str(len(original.ROPGadgets)) + ", ,"
orig_counts = orig_counts + str(len(original.JOPGadgets)) + ", ,"
orig_counts = orig_counts + str(len(original.COPGadgets)) + "\r"
file_2_lines.append(orig_counts)

# Output file #3: SP Gadget Counts + Introduction
file_3_lines = ["Special Purpose Gadget Counts + Introduction\r",
                "Package Variant,Syscall Gadgets,JOP Dispatcher Gadgets,JOP Dataloader Gadgets,JOP Initializers,JOP Trampolines,COP Dispatcher Gadgets,COP Dataloader Gadgets,COP Initializers,COP Strong Trampoline Gadgets,COP Intra-stack Pivot Gadgets\r"]
orig_counts = original.name + "," + str(len(original.SyscallGadgets))
orig_counts = orig_counts + "," + str(len(original.JOPDispatchers))
orig_counts = orig_counts + "," + str(len(original.JOPDataLoaders))
orig_counts = orig_counts + "," + str(len(original.JOPInitializers))
orig_counts = orig_counts + "," + str(len(original.JOPTrampolines))
orig_counts = orig_counts + "," + str(len(original.COPDispatchers))
orig_counts = orig_counts + "," + str(len(original.COPDataLoaders))
orig_counts = orig_counts + "," + str(len(original.COPInitializers))
orig_counts = orig_counts + "," + str(len(original.COPStrongTrampolines))
orig_counts = orig_counts + "," + str(len(original.COPIntrastackPivots)) + "\r"
file_3_lines.append(orig_counts)

# Output File 4: Special Purpose Gadget Introduction Counts/Rates
file_4_lines = ["Special Purpose Gadget Introduction Data\r",
                "Package Variant,Syscall Gadgets,Syscall Gadget Introduction Rate," +
                "JOP Dispatcher Gadgets,JOP Dispatcher Gadget Introduction Rate," +
                "JOP Dataloader Gadgets,JOP Dataloader Gadget Introduction Rate," +
                "JOP Initializer Gadgets,JOP Initializer Gadget Introduction Rate," +
                "JOP Trampoline Gadgets,JOP Trampoline Gadget Introduction Rate," +
                "COP Dispatcher Gadgets,COP Dispatcher Gadget Introduction Rate," +
                "COP Dataloader Gadgets,COP Dataloader Gadget Introduction Rate," +
                "COP Initializer Gadgets,COP Initializer Gadget Introduction Rate," +
                "COP Strong Trampoline Gadgets,COP Strong Trampoline Gadget Introduction Rate," +
                "COP Intra-stack Pivot Gadgets,COP Intra-stack Pivot Gadget Introduction Rate\r"]
orig_counts = original.name + "," + str(len(original.SyscallGadgets)) + ", ,"
orig_counts = orig_counts + str(len(original.JOPDispatchers)) + ", ,"
orig_counts = orig_counts + str(len(original.JOPDataLoaders)) + ", ,"
orig_counts = orig_counts + str(len(original.JOPInitializers)) + ", ,"
orig_counts = orig_counts + str(len(original.JOPTrampolines)) + ", ,"
orig_counts = orig_counts + str(len(original.COPDispatchers)) + ", ,"
orig_counts = orig_counts + str(len(original.COPDataLoaders)) + ", ,"
orig_counts = orig_counts + str(len(original.COPInitializers)) + ", ,"
orig_counts = orig_counts + str(len(original.COPStrongTrampolines)) + ", ,"
orig_counts = orig_counts + str(len(original.COPIntrastackPivots)) + "\r"
file_4_lines.append(orig_counts)

# Output File 5: Gadget Expressivity Classes Fulfilled By Variant
orig_prac_rop = str(original.practical_ROP_expressivity) + " of 11"
orig_ASLR_prac_rop = str(original.practical_ASLR_ROP_expressivity) + " of 35"
orig_simple_tc = str(original.turing_complete_ROP_expressivity) + " of 17"
file_5_lines = ["Package Variant,Practical ROP Exploit,ASLR-Proof Practical ROP Exploit,Simple Turing Completeness\r"]
orig_counts = original.name + ","
orig_counts = orig_counts + orig_prac_rop + ","
orig_counts = orig_counts + orig_ASLR_prac_rop + ","
orig_counts = orig_counts + orig_simple_tc + "\r"
file_5_lines.append(orig_counts)

# Output File 6: Overall Gadget Locality
file_6_lines = ["Package Variant,Gadget Locality\r"]

# Output File 7: Average Gadget Quality (and count of quality functional gadgets)
file_7_lines = ["Package Variant,Quality ROP Gadgets,Average ROP Gadget Quality,Quality JOP Gadgets,Average JOP Gadget Quality,Quality COP Gadgets,Average COP Gadget Quality\r"]
orig_quality = original.name + "," + str(len(original.ROPGadgets)) + "," + str(original.averageROPQuality)
orig_quality += "," + str(len(original.JOPGadgets)) + "," + str(original.averageJOPQuality)
orig_quality += "," + str(len(original.COPGadgets)) + "," + str(original.averageCOPQuality) + "\r"
file_7_lines.append(orig_quality)

# Iterate through the variants. Scan them to get a gadget set, compare it to the original, add data to output files
gadgets = {}
for i in range(len(sets)):
    # print("Analyzing variant package for set: "+str(sets[i]))

    variant = None
    key = "-".join([str(j) for j in sets[i]])
    if(key not in gadgets):
        original.variant_gadget(sets[i])
        variant = original
        stat = GadgetStats(original, variant, args.output_console, args.output_locality)

        # Output file 1 variant lines
        # stat_counts = variant.name + "," + str(variant.total_unique_gadgetsVariant) + " (" + str(stat.totalUniqueCountDiff) + "; " + rate_format.format(stat.totalUniqueCountReduction) + "),"
        # stat_counts = stat_counts + str(len(variant.ROPGadgetsVariant)) + " (" + str(stat.ROPCountDiff) + "; " + rate_format.format(stat.ROPCountReduction) + "),"
        # stat_counts = stat_counts + str(len(variant.JOPGadgetsVariant)) + " (" + str(stat.JOPCountDiff) + "; " + rate_format.format(stat.JOPCountReduction) + "),"
        # stat_counts = stat_counts + str(len(variant.COPGadgetsVariant)) + " (" + str(stat.COPCountDiff) + "; " + rate_format.format(stat.COPCountReduction) + "),"
        # stat_counts = stat_counts + str(variant.total_sp_gadgetsVariant) + " (" + str(stat.total_sp_count_diff) + "; " + rate_format.format(stat.total_sp_reduction) + ")\r"
        stat_counts = key + "," + str(len(variant.ROPGadgetsVariant)) 
        stat_counts = stat_counts + "," + str(len(variant.JOPGadgetsVariant)) 
        stat_counts = stat_counts + "," + str(len(variant.COPGadgetsVariant)) 
        stat_counts = stat_counts + "," + str(variant.total_sp_gadgetsVariant) 
        stat_counts = stat_counts + "," + str(variant.total_unique_gadgetsVariant) + "\r"
        file1[key] = stat_counts
        file_1_lines.append(stat_counts)

        # Output file 2 variant lines
        stat_counts = key + "," + str(variant.total_unique_gadgetsVariant) + ","
        stat_counts = stat_counts + rate_format.format(stat.totalUniqueIntroductionRate) + ","
        stat_counts = stat_counts + str(len(variant.ROPGadgetsVariant)) + ","
        stat_counts = stat_counts + rate_format.format(stat.ROPIntroductionRate) + ","
        stat_counts = stat_counts + str(len(variant.JOPGadgetsVariant)) + ","
        stat_counts = stat_counts + rate_format.format(stat.JOPIntroductionRate) + ","
        stat_counts = stat_counts + str(len(variant.COPGadgetsVariant)) + ","
        stat_counts = stat_counts + rate_format.format(stat.COPIntroductionRate) + "\r"
        file2[key] = stat_counts
        file_2_lines.append(stat_counts)

        # Output file 3 variant lines
        # stat_counts = variant.name + "," + str(len(variant.SyscallGadgetsVariant)) + " (" + str(
        #     stat.SysCountDiff) + "; " + rate_format.format(stat.SysCountReduction) + "),"
        # stat_counts = stat_counts + str(len(variant.JOPDispatchersVariant)) + " (" + str(
        #     stat.JOPDispatchersCountDiff) + "; " + rate_format.format(stat.JOPDispatchersCountReduction) + "),"
        # stat_counts = stat_counts + str(len(variant.JOPDataLoadersVariant)) + " (" + str(
        #     stat.JOPDataLoadersCountDiff) + "; " + rate_format.format(stat.JOPDataLoadersCountReduction) + "),"
        # stat_counts = stat_counts + str(len(variant.JOPInitializersVariant)) + " (" + str(
        #     stat.JOPInitializersCountDiff) + "; " + rate_format.format(stat.JOPInitializersCountReduction) + "),"
        # stat_counts = stat_counts + str(len(variant.JOPTrampolinesVariant)) + " (" + str(
        #     stat.JOPTrampolinesCountDiff) + "; " + rate_format.format(stat.JOPTrampolinesCountReduction) + "),"
        # stat_counts = stat_counts + str(len(variant.COPDispatchersVariant)) + " (" + str(
        #     stat.COPDispatchersCountDiff) + "; " + rate_format.format(stat.COPDispatchersCountReduction) + "),"
        # stat_counts = stat_counts + str(len(variant.COPDataLoadersVariant)) + " (" + str(
        #     stat.COPDataLoadersCountDiff) + "; " + rate_format.format(stat.COPDataLoadersCountReduction) + "),"
        # stat_counts = stat_counts + str(len(variant.COPInitializersVariant)) + " (" + str(
        #     stat.COPInitializersCountDiff) + "; " + rate_format.format(stat.COPInitializersCountReduction) + "),"
        # stat_counts = stat_counts + str(len(variant.COPStrongTrampolinesVariant)) + " (" + str(
        #     stat.COPStrongTrampolinesCountDiff) + "; " + rate_format.format(
        #     stat.COPStrongTrampolinesCountReduction) + "),"
        # stat_counts = stat_counts + str(len(variant.COPIntrastackPivotsVariant)) + " (" + str(
        #     stat.COPIntrastackPivotsCountDiff) + "; " + rate_format.format(
        #     stat.COPIntrastackPivotsCountReduction) + ")\r"
        stat_counts = key + "," + str(len(variant.SyscallGadgetsVariant))
        stat_counts = stat_counts + "," + str(len(variant.JOPDispatchersVariant)) 
        stat_counts = stat_counts + "," + str(len(variant.JOPDataLoadersVariant)) 
        stat_counts = stat_counts + "," + str(len(variant.JOPInitializersVariant)) 
        stat_counts = stat_counts + "," + str(len(variant.JOPTrampolinesVariant)) 
        stat_counts = stat_counts + "," + str(len(variant.COPDispatchersVariant)) 
        stat_counts = stat_counts + "," + str(len(variant.COPDataLoadersVariant)) 
        stat_counts = stat_counts + "," + str(len(variant.COPInitializersVariant)) 
        stat_counts = stat_counts + "," + str(len(variant.COPStrongTrampolinesVariant)) 
        stat_counts = stat_counts + "," + str(len(variant.COPIntrastackPivotsVariant)) + "\r"
        file3[key] = stat_counts
        file_3_lines.append(stat_counts)

        # Output file 4 variant lines
        stat_counts = key + "," + str(len(variant.SyscallGadgetsVariant)) + ","
        stat_counts = stat_counts + rate_format.format(stat.SysIntroductionRate) + ","
        stat_counts = stat_counts + str(len(variant.JOPDispatchersVariant)) + ","
        stat_counts = stat_counts + rate_format.format(stat.JOPDispatchersIntroductionRate) + ","
        stat_counts = stat_counts + str(len(variant.JOPDataLoadersVariant)) + ","
        stat_counts = stat_counts + rate_format.format(stat.JOPDataLoadersIntroductionRate) + ","
        stat_counts = stat_counts + str(len(variant.JOPInitializersVariant)) + ","
        stat_counts = stat_counts + rate_format.format(stat.JOPInitializersIntroductionRate) + ","
        stat_counts = stat_counts + str(len(variant.JOPTrampolinesVariant)) + ","
        stat_counts = stat_counts + rate_format.format(stat.JOPTrampolinesIntroductionRate) + ","
        stat_counts = stat_counts + str(len(variant.COPDispatchersVariant)) + ","
        stat_counts = stat_counts + rate_format.format(stat.COPDispatchersIntroductionRate) + ","
        stat_counts = stat_counts + str(len(variant.COPDataLoadersVariant)) + ","
        stat_counts = stat_counts + rate_format.format(stat.COPDataLoadersIntroductionRate) + ","
        stat_counts = stat_counts + str(len(variant.COPInitializersVariant)) + ","
        stat_counts = stat_counts + rate_format.format(stat.COPInitializersIntroductionRate) + ","
        stat_counts = stat_counts + str(len(variant.COPStrongTrampolinesVariant)) + ","
        stat_counts = stat_counts + rate_format.format(stat.COPStrongTrampolinesIntroductionRate) + ","
        stat_counts = stat_counts + str(len(variant.COPIntrastackPivotsVariant)) + ","
        stat_counts = stat_counts + rate_format.format(stat.COPIntrastackPivotsIntroductionRate) + "\r"
        file4[key] = stat_counts
        file_4_lines.append(stat_counts)

        # Output file 5 variant lines
        stat_counts = key + "," + str(variant.practical_ROP_expressivityVariant) + " (" + str(stat.practical_ROP_exp_diff) + "),"
        stat_counts += str(variant.practical_ASLR_ROP_expressivityVariant) + " (" + str(stat.practical_ASLR_ROP_exp_diff)  + "),"
        stat_counts += str(variant.turing_complete_ROP_expressivityVariant) + " (" + str(stat.turing_complete_ROP_exp_diff) + ")\r"
        file5[key] = stat_counts
        file_5_lines.append(stat_counts)

        # Output file 6 variant lines
        if args.output_locality:
            stat_locality = key + "," + rate_format.format(stat.gadgetLocality) + "\r"
            file6[key] = stat_locality
            file_6_lines.append(stat_locality)

        # Output file 7 variant lines
        stat_quality = key + "," + str(len(variant.ROPGadgetsVariant)) + " (" + str(stat.keptQualityROPCountDiff) + "),"
        stat_quality += str(variant.averageROPQualityVariant) + " (" + str(stat.averageROPQualityDiff) + "),"
        stat_quality += str(len(variant.JOPGadgetsVariant)) + " (" + str(stat.keptQualityJOPCountDiff) + "),"
        stat_quality += str(variant.averageJOPQualityVariant) + " (" + str(stat.averageJOPQualityDiff) + "),"
        stat_quality += str(len(variant.COPGadgetsVariant)) + " (" + str(stat.keptQualityCOPCountDiff) + "),"
        stat_quality += str(variant.averageCOPQualityVariant) + " (" + str(stat.averageCOPQualityDiff) + ")\r"
        file7[key] = stat_quality
        file_7_lines.append(stat_quality)

        # Output file 8 variant lines
        # if args.output_addresses:
        #     stat_address = "Sensitive gadgets introduced in variant: " + variant.name + "\r"
        #     specialSets = [variant.SyscallGadgetsVariant, variant.JOPDispatchersVariant,
        #                     variant.JOPDataLoadersVariant, variant.JOPInitializersVariant,
        #                     variant.JOPTrampolinesVariant, variant.COPDispatchersVariant,
        #                     variant.COPDataLoadersVariant, variant.COPInitializersVariant,
        #                     variant.COPStrongTrampolinesVariant, variant.COPIntrastackPivotsVariant]
        #     for specialSet in specialSets:
        #         for gadget in specialSet:
        #             stat_address += "Gadget: " + str(gadget.instructions) + "\r"
        #             stat_address += "Found at offset: " + gadget.offset + "\r"
        #             function = variant.getFunction(gadget.offset)
        #             if function is None:
        #                 stat_address += "No associated function found.\r"
        #             else:
        #                 stat_address += "Most likely location in source code: " + function + "\r"
        #     stat_address += "----------------------------------------------------------\r"
        #     file8[key] = stat_address

        gadgets[key] = 1
    else:
        file_1_lines.append(file1[key])
        file_2_lines.append(file2[key])
        file_3_lines.append(file3[key])
        file_4_lines.append(file4[key])
        file_5_lines.append(file5[key])
        if args.output_locality:
            file_6_lines.append(file6[key])
        file_7_lines.append(file7[key])
        #file_8_lines.append(file8[key])

# Write file lines to disk.
try:
    # Output file 1
    file = open(directory_name + "/GadgetCounts_Reduction.csv", "w")
    file.writelines(file_1_lines)
    file.close()

    # Output file 2
    file = open(directory_name + "/Gadget_Introduction_Counts_Rate.csv", "w")
    file.writelines(file_2_lines)
    file.close()

    # Output file 3
    file = open(directory_name + "/SpecialPurpose_GadgetCounts_Reduction.csv", "w")
    file.writelines(file_3_lines)
    file.close()

    # Output file 4
    file = open(directory_name + "/SpecialPurpose_Gadget_Introduction_Counts_Rate.csv", "w")
    file.writelines(file_4_lines)
    file.close()

    # Output file 5
    file = open(directory_name + "/Expressivity_Counts.csv", "w")
    file.writelines(file_5_lines)
    file.close()

    # Output file 6
    if args.output_locality:
        file = open(directory_name + "/Gadget Locality.csv", "w")
        file.writelines(file_6_lines)
        file.close()

    # Output file 7
    file = open(directory_name + "/Gadget Quality.csv", "w")
    file.writelines(file_7_lines)
    file.close()

    # # Output file 8
    # if args.output_addresses:
    #     file = open(directory_name + "/Likely_Gadget_Locations.txt", "w")
    #     file.writelines(file_8_lines)
    #     file.close()

except OSError as osErr:
    print(osErr)
